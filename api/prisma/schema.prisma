generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model coffee_stock_activities {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coffee_stock_id String?        @db.Uuid
  amount          Int?
  memo            String?
  create_at       DateTime?      @db.Timestamp(6)
  coffee_stocks   coffee_stocks? @relation(fields: [coffee_stock_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  receipts        receipts[]
}

model coffee_stocks {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                 String                    @db.Uuid
  coffee_id               String                    @db.Uuid
  amount                  Int?
  create_at               DateTime?                 @db.Timestamp(6)
  coffees                 coffees                   @relation(fields: [coffee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                   users                     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  coffee_stock_activities coffee_stock_activities[]
}

model coffees {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?         @db.Uuid
  name          String?
  create_at     DateTime?       @db.Timestamp(6)
  users         users?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  coffee_stocks coffee_stocks[]
}

model receipts {
  id                      String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activity_id             String                  @db.Uuid
  store_id                String?                 @db.Uuid
  memo                    String?
  create_at               DateTime?               @db.Timestamp(6)
  coffee_stock_activities coffee_stock_activities @relation(fields: [activity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stores                  stores?                 @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stores {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id   String     @db.Uuid
  name      String
  address   String?
  create_at DateTime?  @db.Timestamp(6)
  users     users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  receipts  receipts[]
}

model users {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nickname      String?
  coffee_stocks coffee_stocks[]
  coffees       coffees[]
  stores        stores[]
}
